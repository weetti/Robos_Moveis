--Funcao que calcula o angulo para o Robo fazer o giro
function angulo(distX, distY)

-- Pega a posicao atual do robo
    posicao_robo=sim.getObjectOrientation(Robo,-1)

-- Pega a posicao do obstaculo  
    alpha=math.atan2(distY,distX)
    
-- Define angulo de desvio baseado na diferenca entre a posicao do robo e o obstaculo    
    theta=posicao_robo[3]-alpha

-- Condicao de desvio, se Maior que Pi theta e a diferenca entre theta e o dobro de Pi      
    if theta>math.pi then
        theta=theta-2*math.pi
        
-- Caso contrario se theta menor que Pi, theta recebe a soma de theta com o dobro de Pi        
    elseif theta< -math.pi then
        theta=theta+2*math.pi
    end
end

-- Funcao de inicializacao, executado uma vez apenas no inicio de uma simulacao.
-- O codigo se encarrega de preparar uma simulacao
function sysCall_init() 

-- Inicializa variaveis que serao utilizadas na trajetoria    
    ponto = 0
    raio_dist = 0.7
    v0 = 5.0
    state = 1
    pontos_GPS = {}

    --Sensores
    usensors = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
    for i=1,16,1 do
        usensors[i] = sim.getObjectHandle("Pioneer_p3dx_ultrasonicSensor"..i)
    end
    
    --Motores
    motorLeft = sim.getObjectHandle("Pioneer_p3dx_leftMotor")
    motorRight = sim.getObjectHandle("Pioneer_p3dx_rightMotor")

    --GPS
    GPS = sim.getObjectHandle("GPS")
    
    --Robo
    Robo = sim.getObjectHandle("Pioneer_p3dx")
    
    --Dados do GPS
    dados_GPS_robo = sim.tubeOpen(0,'gpsDataRobo',1)
    dados_GPS_pontos = sim.tubeOpen(0,'gpsData'..sim.getNameSuffix(nil),1)

    -- Arquivo com os waypoints, endereco do cenario deve ser colocado exatamente como no buscador do SO
    -- O Arquivo .txt deve estar localizado na pasta do programa 
    local file, erro = io.open("C:/Users/Wetti/Desktop/TrabRobosMoveis/Waypoint3-Cenario03-2023.txt", "r")
    if not file then error(erro) end
    numero_pontos = tonumber(file:read())
    
    -- Le dados do GPS e a localizacao do Robo, logo apos inicia o movimento, print RUN para comecar
    for i = 0, numero_pontos - 1  do
        line = file:read()
        li = string.find(line," ")
        table.insert(pontos_GPS, {tonumber(line:sub(1,li-1)), tonumber(line:sub(li+1,string.len(line)))})
    end
    file:close()
    
    print("RUN:")
end

-- Funcao de restauracao Esta funcao sera executada uma vez antes de uma simulacao terminar.
-- O codigo e responsavel por restaurar a configuracao inicial do objeto , limpar os estados do sensor
function sysCall_cleanup() 
 
end 

-- Funcao de atuacao. Esta funcao de retorno de chamada sera executada em cada passagem de simulacao.
-- O codigo e responsavel por lidar com toda a funcionalidade de atuacao da simulacao.
function sysCall_actuation()
    
    res={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    dist={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    
    for i=1,16,1 do
        res[i],dist[i] = sim.readProximitySensor(usensors[i])
        if res[i]==0 or dist[i] == nil then
            dist[i]=1.0
        end
    end    
    
    --Dados do GPS
    data=sim.tubeRead(dados_GPS_pontos)
    if (data) then
        x_ponto=sim.unpackFloatTable(data)[1]
        y_ponto=sim.unpackFloatTable(data)[2]
    end
    if x_ponto==nil then x_ponto=0 end
    if y_ponto==nil then y_ponto=0 end

    data=sim.tubeRead(dados_GPS_robo)
    -- print("Dados do GPS:", data)
    if (data) then
        x_robo=sim.unpackFloatTable(data)[1]
        y_robo=sim.unpackFloatTable(data)[2]
    end
    if x_robo==nil then x_robo=0 end
    if y_robo==nil then y_robo=0 end
    
    --Distancia entre o robo e o ponto de GPS
    distancia_X=x_ponto-x_robo
    distancia_Y=y_ponto-y_robo
    
    --Distancia euclidiana
    distancia = math.sqrt((distancia_X^2)+(distancia_Y^2))
    
    --Altera localizacao do GPS para os waypoint
    if distancia < raio_dist and ponto < numero_pontos then
        ponto=ponto+1
        sim.setObjectPosition(GPS, -1, {pontos_GPS[ponto][1], pontos_GPS[ponto][2], 0})
    end
    
    --Algulo do robo
    angulo(distancia_X, distancia_Y)
    
    print('Distancia Chegada: ' .. distancia)
    --Verifica estados
    if distancia < raio_dist and ponto == numero_pontos then
        vLeft = 0
        vRight = 0
        
        print("Achou!")
        
    --Linha reta
    elseif state == 1 then
        vLeft=v0+theta*5.0
        vRight=v0-theta*5.0
        
    --Desvio
    elseif state == 2 then      
        dif_L=raio_dist-dist[1]
        vLeft=v0+dif_L*5.0
        vRight=v0-dif_L*5.0
        
        for i=0,4,1 do
            if dist[i+1] < (raio_dist-(0.05*(4-i))) then
                vLeft=v0*0.5
                vRight=-v0*0.5
                break
            end 
        end
        
    --Desvio
    elseif state == 3 then
        dif_R=raio_dist-dist[8]
        vLeft=v0-dif_R*5.0
        vRight=v0+dif_R*5.0
        
        for i=0,4,1 do
            if dist[i+4] < (raio_dist-(0.05*i)) then
                vLeft=-v0*0.5
                vRight=v0*0.5
                break
            end 
        end 
    end

    if state==1 and (dist[1] < raio_dist-0.1 or dist[2]< raio_dist-0.05 or dist[3] < raio_dist or dist[4] < raio_dist or dist[5] < raio_dist or dist[6] < raio_dist or dist[7] < raio_dist-0.05 or dist[8] < raio_dist-0.1) then
        if dist[4] > dist[5] then
            state = 3
        else
            state = 2
        end
    elseif state == 2 and theta > 0.1 then
        state = 1
    elseif state == 3 and theta < -0.1 then
        state = 1
    end
    
    --Velocidade dos motores
    sim.setJointTargetVelocity(motorLeft,vLeft)
    sim.setJointTargetVelocity(motorRight,vRight)
end 

